name: Maintenance & Updates

on:
  schedule:
    # Run weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'
  workflow_dispatch:
    inputs:
      update_type:
        description: 'Type of update to perform'
        required: true
        default: 'dependencies'
        type: choice
        options:
          - dependencies
          - security
          - all

env:
  CARGO_TERM_COLOR: always

jobs:
  dependency-updates:
    name: Update Dependencies
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event.inputs.update_type == 'dependencies' || github.event.inputs.update_type == 'all'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      
    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      
    - name: Install cargo-edit
      run: cargo install cargo-edit
      
    - name: Update Rust dependencies
      run: |
        # Update all Cargo dependencies to latest compatible versions
        cargo update
        
        # Check for outdated dependencies
        cargo install cargo-outdated
        cargo outdated --exit-code 1 || echo "Some dependencies are outdated"
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Update npm dependencies
      run: |
        # Update npm dependencies
        npm update
        
        # Check for security vulnerabilities
        npm audit --audit-level high
        
    - name: Run tests after updates
      run: |
        # Install system dependencies for testing
        sudo apt-get update
        sudo apt-get install -y \
          libgtk-3-dev \
          libwebkit2gtk-4.0-dev \
          libayatana-appindicator3-dev \
          librsvg2-dev \
          libssl-dev \
          libsqlite3-dev \
          pkg-config
          
        # Run tests to ensure updates don't break functionality
        cargo test --all-features
        
    - name: Create Pull Request
      if: success()
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: 'chore: update dependencies'
        title: 'Automated Dependency Updates'
        body: |
          ## Automated Dependency Updates
          
          This PR contains automated updates to project dependencies:
          
          ### Rust Dependencies
          - Updated via `cargo update`
          - All tests passing ✅
          
          ### Node.js Dependencies  
          - Updated via `npm update`
          - Security audit passed ✅
          
          ### Verification
          - [ ] All tests pass
          - [ ] No breaking changes detected
          - [ ] Security audit clean
          
          This PR was automatically generated by the maintenance workflow.
        branch: automated/dependency-updates
        delete-branch: true

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event.inputs.update_type == 'security' || github.event.inputs.update_type == 'all'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      
    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      
    - name: Install security tools
      run: |
        cargo install cargo-audit
        cargo install cargo-deny
        
    - name: Run Rust security audit
      run: |
        echo "## Rust Security Audit" >> security-report.md
        echo "### cargo-audit results:" >> security-report.md
        cargo audit --json | tee audit-results.json
        
        if [ -s audit-results.json ]; then
          echo "⚠️ Security vulnerabilities found in Rust dependencies" >> security-report.md
          cat audit-results.json >> security-report.md
        else
          echo "✅ No security vulnerabilities found in Rust dependencies" >> security-report.md
        fi
        
    - name: Check license compliance
      run: |
        echo "## License Compliance Check" >> security-report.md
        cargo deny check licenses >> security-report.md || echo "❌ License issues found" >> security-report.md
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Run npm security audit
      run: |
        echo "## Node.js Security Audit" >> security-report.md
        npm audit --json > npm-audit.json || true
        
        if [ -s npm-audit.json ]; then
          vulnerabilities=$(cat npm-audit.json | jq '.metadata.vulnerabilities.total // 0')
          if [ "$vulnerabilities" -gt 0 ]; then
            echo "⚠️ $vulnerabilities security vulnerabilities found in Node.js dependencies" >> security-report.md
            npm audit >> security-report.md
          else
            echo "✅ No security vulnerabilities found in Node.js dependencies" >> security-report.md
          fi
        fi
        
    - name: Create security issue
      if: failure()
      uses: dacbd/create-issue-action@main
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        title: 'Security Audit Alert - $(date +%Y-%m-%d)'
        body: |
          ## Security Audit Alert
          
          The automated security audit has detected potential issues:
          
          $(cat security-report.md)
          
          **Action Required:**
          - Review the security findings above
          - Update vulnerable dependencies
          - Test for breaking changes
          - Deploy security fixes
          
          This issue was automatically generated by the maintenance workflow.
        assignees: ${{ github.repository_owner }}
        
    - name: Upload security report
      uses: actions/upload-artifact@v4
      with:
        name: security-report
        path: security-report.md
        retention-days: 90

  code-quality:
    name: Code Quality Check
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event.inputs.update_type == 'all'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy
        
    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libgtk-3-dev \
          libwebkit2gtk-4.0-dev \
          libayatana-appindicator3-dev \
          librsvg2-dev \
          libssl-dev \
          libsqlite3-dev \
          pkg-config
          
    - name: Run comprehensive Clippy check
      run: |
        # Run Clippy with all lints
        cargo clippy --all-targets --all-features -- \
          -W clippy::all \
          -W clippy::pedantic \
          -W clippy::nursery \
          -W clippy::cargo \
          -A clippy::multiple_crate_versions \
          > clippy-results.txt 2>&1 || true
          
    - name: Check for TODO/FIXME comments
      run: |
        echo "## Code Quality Report" > quality-report.md
        echo "### TODO/FIXME Comments:" >> quality-report.md
        
        todo_count=$(grep -r "TODO\|FIXME\|XXX" src/ --include="*.rs" | wc -l || echo "0")
        echo "Found $todo_count TODO/FIXME comments" >> quality-report.md
        
        if [ "$todo_count" -gt 0 ]; then
          grep -r "TODO\|FIXME\|XXX" src/ --include="*.rs" >> quality-report.md || true
        fi
        
    - name: Analyze code complexity
      run: |
        cargo install tokei
        echo "### Code Statistics:" >> quality-report.md
        tokei src/ >> quality-report.md
        
    - name: Upload quality report
      uses: actions/upload-artifact@v4
      with:
        name: code-quality-report
        path: |
          quality-report.md
          clippy-results.txt
        retention-days: 30

  cleanup:
    name: Cleanup Old Artifacts
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    steps:
    - name: Delete old workflow runs
      uses: Mattraks/delete-workflow-runs@v2
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        repository: ${{ github.repository }}
        retain_days: 30
        keep_minimum_runs: 10
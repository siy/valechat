name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  # Enable SQLite for testing
  SQLX_OFFLINE: true

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust: [stable, beta]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy
        
    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        key: test-${{ matrix.rust }}
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libgtk-3-dev \
          libwebkit2gtk-4.0-dev \
          libayatana-appindicator3-dev \
          librsvg2-dev \
          libssl-dev \
          libsqlite3-dev \
          pkg-config
          
    - name: Check formatting
      run: cargo fmt --all -- --check
      
    - name: Run Clippy
      run: cargo clippy --all-targets --all-features -- -D warnings
      
    - name: Run tests
      run: |
        # Run all tests with output
        cargo test --verbose --all-features
        
    - name: Test documentation
      run: cargo doc --no-deps --all-features
      
    - name: Check build
      run: cargo build --release --all-features

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      
    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      
    - name: Install cargo-audit
      run: cargo install cargo-audit
      
    - name: Run security audit
      run: cargo audit
      
    - name: Install cargo-deny
      run: cargo install cargo-deny
      
    - name: Check licenses and dependencies
      run: cargo deny check

  build:
    name: Build Application
    needs: [test, security]
    if: github.event_name == 'release' || (github.event_name == 'push' && github.ref == 'refs/heads/main')
    strategy:
      fail-fast: false
      matrix:
        platform:
          - os: ubuntu-20.04
            rust_target: x86_64-unknown-linux-gnu
            tauri_target: x86_64-unknown-linux-gnu
            arch: x86_64
          - os: ubuntu-20.04
            rust_target: aarch64-unknown-linux-gnu
            tauri_target: aarch64-unknown-linux-gnu
            arch: aarch64
          - os: macos-latest
            rust_target: x86_64-apple-darwin
            tauri_target: x86_64-apple-darwin
            arch: x86_64
          - os: macos-latest
            rust_target: aarch64-apple-darwin
            tauri_target: aarch64-apple-darwin
            arch: aarch64
          - os: windows-latest
            rust_target: x86_64-pc-windows-msvc
            tauri_target: x86_64-pc-windows-msvc
            arch: x86_64

    runs-on: ${{ matrix.platform.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install frontend dependencies
      run: npm ci

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.platform.rust_target }}

    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2
      with:
        key: build-${{ matrix.platform.os }}-${{ matrix.platform.arch }}

    # Platform-specific setup
    - name: Install Linux dependencies
      if: matrix.platform.os == 'ubuntu-20.04'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libgtk-3-dev \
          libwebkit2gtk-4.0-dev \
          libayatana-appindicator3-dev \
          librsvg2-dev \
          libssl-dev \
          libsqlite3-dev \
          pkg-config

    - name: Install Linux cross-compilation dependencies
      if: matrix.platform.os == 'ubuntu-20.04' && matrix.platform.arch == 'aarch64'
      run: |
        sudo apt-get install -y gcc-aarch64-linux-gnu
        echo "PKG_CONFIG_SYSROOT_DIR=/usr/aarch64-linux-gnu" >> $GITHUB_ENV
        echo "CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
        echo "CXX_aarch64_unknown_linux_gnu=aarch64-linux-gnu-g++" >> $GITHUB_ENV

    - name: Setup macOS signing
      if: matrix.platform.os == 'macos-latest' && github.event_name == 'release'
      env:
        APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
        APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
        APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
        APPLE_ID: ${{ secrets.APPLE_ID }}
        APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
        APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      run: |
        # Install the certificate
        echo $APPLE_CERTIFICATE | base64 --decode > certificate.p12
        security create-keychain -p keychainpassword build.keychain
        security default-keychain -s build.keychain
        security unlock-keychain -p keychainpassword build.keychain
        security import certificate.p12 -k build.keychain -P $APPLE_CERTIFICATE_PASSWORD -T /usr/bin/codesign
        security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k keychainpassword build.keychain
        
        # Set up environment variables for Tauri
        echo "APPLE_CERTIFICATE=$APPLE_CERTIFICATE" >> $GITHUB_ENV
        echo "APPLE_CERTIFICATE_PASSWORD=$APPLE_CERTIFICATE_PASSWORD" >> $GITHUB_ENV
        echo "APPLE_SIGNING_IDENTITY=$APPLE_SIGNING_IDENTITY" >> $GITHUB_ENV
        echo "APPLE_ID=$APPLE_ID" >> $GITHUB_ENV
        echo "APPLE_PASSWORD=$APPLE_PASSWORD" >> $GITHUB_ENV
        echo "APPLE_TEAM_ID=$APPLE_TEAM_ID" >> $GITHUB_ENV

    - name: Setup Windows signing
      if: matrix.platform.os == 'windows-latest' && github.event_name == 'release'
      env:
        WINDOWS_CERTIFICATE: ${{ secrets.WINDOWS_CERTIFICATE }}
        WINDOWS_CERTIFICATE_PASSWORD: ${{ secrets.WINDOWS_CERTIFICATE_PASSWORD }}
      run: |
        # Install the certificate (PowerShell)
        $cert = [System.Convert]::FromBase64String("$env:WINDOWS_CERTIFICATE")
        [IO.File]::WriteAllBytes("certificate.p12", $cert)
        
        # Import certificate to store
        Import-PfxCertificate -FilePath certificate.p12 -CertStoreLocation Cert:\CurrentUser\My -Password (ConvertTo-SecureString -String "$env:WINDOWS_CERTIFICATE_PASSWORD" -AsPlainText -Force)
        
        # Set environment variables for Tauri
        echo "WINDOWS_CERTIFICATE=$env:WINDOWS_CERTIFICATE" >> $env:GITHUB_ENV
        echo "WINDOWS_CERTIFICATE_PASSWORD=$env:WINDOWS_CERTIFICATE_PASSWORD" >> $env:GITHUB_ENV
      shell: powershell

    - name: Build Frontend
      run: npm run build

    - name: Install Tauri CLI
      run: cargo install tauri-cli --version "^2.0" --locked

    - name: Build Tauri Application
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        ENABLE_CODE_SIGNING: ${{ github.event_name == 'release' }}
        TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
        TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
      run: |
        cargo tauri build --target ${{ matrix.platform.tauri_target }} --verbose

    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: valechat-${{ matrix.platform.os }}-${{ matrix.platform.arch }}
        path: |
          src-tauri/target/${{ matrix.platform.rust_target }}/release/bundle/
        retention-days: 30

    - name: Create Release Assets
      if: github.event_name == 'release'
      shell: bash
      run: |
        # Create release directory
        mkdir -p release-assets
        
        # Copy built artifacts based on platform
        if [[ "${{ matrix.platform.os }}" == "ubuntu-20.04" ]]; then
          # Linux artifacts
          cp src-tauri/target/${{ matrix.platform.rust_target }}/release/bundle/deb/*.deb release-assets/ || echo "No .deb files found"
          cp src-tauri/target/${{ matrix.platform.rust_target }}/release/bundle/rpm/*.rpm release-assets/ || echo "No .rpm files found"
          cp src-tauri/target/${{ matrix.platform.rust_target }}/release/bundle/appimage/*.AppImage release-assets/ || echo "No .AppImage files found"
        elif [[ "${{ matrix.platform.os }}" == "macos-latest" ]]; then
          # macOS artifacts
          cp src-tauri/target/${{ matrix.platform.rust_target }}/release/bundle/dmg/*.dmg release-assets/ || echo "No .dmg files found"
          cp src-tauri/target/${{ matrix.platform.rust_target }}/release/bundle/macos/*.app.tar.gz release-assets/ || echo "No .app.tar.gz files found"
        elif [[ "${{ matrix.platform.os }}" == "windows-latest" ]]; then
          # Windows artifacts
          cp src-tauri/target/${{ matrix.platform.rust_target }}/release/bundle/msi/*.msi release-assets/ || echo "No .msi files found"
          cp src-tauri/target/${{ matrix.platform.rust_target }}/release/bundle/nsis/*.exe release-assets/ || echo "No .exe files found"
        fi

    - name: Upload Release Assets
      if: github.event_name == 'release'
      uses: softprops/action-gh-release@v1
      with:
        files: release-assets/*
        tag_name: ${{ github.ref_name }}
        name: Release ${{ github.ref_name }}
        body: |
          ## Changes
          
          See [CHANGELOG.md](CHANGELOG.md) for details.
          
          ## Downloads
          
          - **Linux**: Download the `.deb`, `.rpm`, or `.AppImage` file
          - **macOS**: Download the `.dmg` file  
          - **Windows**: Download the `.msi` or `.exe` file
          
          ## Verification
          
          All binaries are signed and can be verified using the provided signatures.
        draft: false
        prerelease: ${{ contains(github.ref_name, 'rc') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'alpha') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  update-release-info:
    name: Update Release Information
    needs: [build]
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Generate release metadata
      run: |
        # Create release metadata for auto-updater
        cat > release-info.json << EOF
        {
          "version": "${{ github.ref_name }}",
          "notes": "See CHANGELOG.md for details",
          "pub_date": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
          "platforms": {
            "linux-x86_64": {
              "signature": "",
              "url": "https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/valechat_${{ github.ref_name }}_amd64.AppImage"
            },
            "darwin-x86_64": {
              "signature": "",
              "url": "https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/ValeChat_${{ github.ref_name }}_x64.dmg"
            },
            "darwin-aarch64": {
              "signature": "",
              "url": "https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/ValeChat_${{ github.ref_name }}_aarch64.dmg"
            },
            "windows-x86_64": {
              "signature": "",
              "url": "https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/ValeChat_${{ github.ref_name }}_x64_en-US.msi"
            }
          }
        }
        EOF
        
    - name: Upload release metadata
      uses: actions/upload-artifact@v4
      with:
        name: release-metadata
        path: release-info.json

  notify:
    name: Notification
    needs: [test, security, build]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
    - name: Notify success
      if: needs.test.result == 'success' && needs.security.result == 'success' && (needs.build.result == 'success' || needs.build.result == 'skipped')
      run: |
        echo "✅ All checks passed successfully!"
        
    - name: Notify failure
      if: needs.test.result == 'failure' || needs.security.result == 'failure' || needs.build.result == 'failure'
      run: |
        echo "❌ One or more checks failed!"
        exit 1